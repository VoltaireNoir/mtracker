#! /usr/bin/env python3
import sys
from tutils import *

activities = load()
ON = True if activities.ACTIVE.state else False
if ON:
    SELECTED = activities.ACTIVE.name
else:
    SELECTED = None if len(activities) == 0 else activities[0].name
HANDLE = None
KEYS = {"1":0,"2":1,"3":2,"4":3,"5":4,"6":5,"7":6,"8":7,"9":8,"0":9,"!":10,"@":11,"#":12,"$":13,"%":14,"^":15,"&":16,"*":17,"(":18,")":19}

def args_handler(args):

    if len(args) >= 2:
        if args[0].lower() in ("add","a"):
            name = args[1]
            if activities.add(name):
                save(activities)
                print("Done!")

        elif args[0].lower() in ("del","d"):
            name = args[1]
            if activities.delete(name):
                save(activities)
                print("Done!")

        elif args[0].lower() == "log":
            name = args[1]
            print(activities.get_log(name))

        elif args[0].lower() == "today":
            name = args[1]
            print(activities.todays_log(name))

        elif args[0].lower() in ("select","sel"):
            name = args[1]
            if activities.select(name):
                save(activities)
                print("Done!")

        elif args[0].lower() == "map":
            name = args[1]
            if args[2] in KEYS:
                index = KEYS[args[2]]
                if activities.map(name,index):
                    save(activities)
                    print("Done!")

        elif args[0].lower() == "clean":
            name, date, today = args[1], None, False
            if len(args) == 3:
                if args[2].lower() == "today": today = True
                else: date = args[1]
            if name == "all": activities.clean_all_logs()
            else: activities.clean_log(name,date,today)
            save(activities)
    else:
        if args[0].lower() == "logs":
            print(activities.get_logs())

        elif args[0].lower() == "list":
            if len(activities.get_all_names()) == 0:
                print("Empty")
            else:
                for name in activities.get_all_names():
                    print(name)

        elif args[0].lower() == "start":
            if activities.activate():
                save(activities)
                print(f"{activities.ACTIVE.name} is now active!")

        elif args[0].lower() == "stop":
            if activities.deactivate():
                save(activities)
                name = activities.ACTIVE.name
                print(f"{name} finished at {activities.todays_log(name)}")

        elif args[0].lower() == "status":
            name = "None" if activities.ACTIVE.name == "" else activities.ACTIVE.name
            state = "Active" if activities.ACTIVE.state else "Inactive"
            clog = activities.active_log()
            print(f"Sel: {name.capitalize()}\nState: {state}\nLog: {clog}")

        elif args[0].lower() == "keymap":
            k = list(KEYS.keys())
            for keymap in [f"{k[i]}: {name}" for i, name in enumerate(activities.get_all_names()) if i < 20]:
                print(keymap)

        elif args[0].lower() == "flush":
            activities.flush()
            save(activities)

        elif args[0].lower() == "export":
            if export_csv(activities):
                print("Done!")

def input_handler(key):
    global SELECTED, ON, HANDLE

    if key == "q": raise u.ExitMainLoop()

    elif key == "s":
        if not ON:
            ON = True
            activities.activate(SELECTED)
            HANDLE = timer(_loop=loop,_data=None)
        else:
            ON = False
            loop.remove_alarm(HANDLE)
            activities.deactivate()
            save(activities)
            text.set_text(f"Finished: {activities.todays_log(SELECTED)}")

    elif key == "r" and ON:
        loop.remove_alarm(HANDLE)
        HANDLE = timer(_loop=loop,_data=None)

    elif key == "l" and not ON:
        text.set_text(f"{SELECTED} Log:\n\n{activities.get_log(SELECTED,recent=True)}")

    elif key == "c" and not ON:
        activities.clean_log(SELECTED,today=True)
        save(activities)
        text.set_text(f"Today's {SELECTED} Log Cleared")

    elif key == "C" and not ON:
        activities.clean_log(SELECTED)
        save(activities)
        text.set_text(f"{SELECTED}'s All Logs Cleared")

    elif key == "D" and not ON:
        activities.delete(SELECTED)
        save(activities)
        text.set_text(f"{SELECTED} Deleted from Activities")

    elif key in KEYS and not ON:
        key = KEYS[key]
        if key < len(activities):
            SELECTED = activities[key].name
            text.set_text(f"Selected: {SELECTED}")

def timer(_loop,_data):
    if ON:
        text.set_text(
            f"{SELECTED} is now active!\n\n {activities.active_log()}"
        )
        HANDLE = loop.set_alarm_in(1,timer)
        return HANDLE

# If arguments exist, process them, then exit
if len(sys.argv) > 1:args_handler(sys.argv[1:]); exit()

try: import urwid as u; TUI = True
except ModuleNotFoundError: TUI = False

# Check for these conditions before launching TUI
if TUI is False: print("Urwid Python module is missing:\nrun 'pip install urwid'")
elif SELECTED is None: print("No activities found.\nAdd at least one activity to start the UI.")

# Build and Run TUI
else:
    if ON:
        text = u.Text(f"{SELECTED} is now active!\n\n {activities.active_log()}","center")
    else:
        text = u.Text(f"Selected: {SELECTED}","center")
    fill = u.Filler(text)
    try: loop = u.MainLoop(fill,unhandled_input=input_handler); loop.run()
    except KeyboardInterrupt: print("Exiting...")
