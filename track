#! /usr/bin/env python3
import sys
from tutils import *

activities = load()
ON = True if activities.ACTIVE.state else False
if ON:
    SELECTED = activities.ACTIVE.name
else:
    SELECTED = None if len(activities) == 0 else activities[0].name
HANDLE = None
KEYS = {"1":0,"2":1,"3":2,"4":3,"5":4,"6":5,"7":6,"8":7,"9":8,"0":9,"!":10,"@":11,"#":12,"$":13,"%":14,"^":15,"&":16,"*":17,"(":18,")":19}

def args_handler(args):

    match [arg.lower() for arg in args]:
        case ["add" | "a" , name]:
            if activities.add(name):
                save(activities)
                print("Done!")

        case ["delete" | "del", name]:
            if activities.delete(name):
                save(activities)
                print("Done!")

        case ["sel" | "select", name]:
            if activities.select(name):
                save(activities)
                print("Done!")

        case ["log", name]:
            name = args[1]
            print(activities.get_log(name))

        case ["today", name]:
            print(activities.todays_log(name))

        case ["map", name, key] if key in KEYS:
            index = KEYS[key]
            if activities.map(name,index):
                save(activities)
                print("Done!")

        case ["clean", *clargs]:
            match clargs:
                case ["all"]:
                    activities.clean_all_logs()
                case [name]:
                    activities.clean_log(name)
                case [name,"today"]:
                    activities.clean_log(name,today=True)
                case [name, date]:
                    activities.clean_log(name,date)
            save(activities)

        case ["logs"]:
            print(activities.get_logs())

        case ["list"]:
            if len(activities.get_all_names()) == 0:
                print("Empty")
            else:
                for name in activities.get_all_names():
                    print(name)

        case ["start"]:
            if activities.activate():
                save(activities)
                print(f"{activities.ACTIVE.name} is now active!")

        case ["stop"]:
            if activities.deactivate():
                save(activities)
                name = activities.ACTIVE.name
                print(f"{name} finished at {activities.todays_log(name)}")

        case ["status"]:
            name = "None" if activities.ACTIVE.name == "" else activities.ACTIVE.name
            state = "Active" if activities.ACTIVE.state else "Inactive"
            clog = activities.active_log()
            print(f"Sel: {name.capitalize()}\nState: {state}\nLog: {clog}")

        case ["keymap"]:
            k = list(KEYS.keys())
            for keymap in [f"{k[i]}: {name}" for i, name in enumerate(activities.get_all_names()) if i < 20]:
                print(keymap)

        case ["flush"]:
            activities.flush()
            save(activities)

        case ["export"]:
            if export_csv(activities):
                print("Done!")

def input_handler(key):
    global SELECTED, ON, HANDLE

    match key:
        case "q": raise u.ExitMainLoop()

        case "s":
            if not ON:
                ON = True
                activities.activate(SELECTED)
                HANDLE = timer(_loop=loop,_data=None)
            else:
                ON = False
                loop.remove_alarm(HANDLE)
                activities.deactivate()
                save(activities)
                text.set_text(f"Finished: {activities.todays_log(SELECTED)}")

        case "r" if ON:
            loop.remove_alarm(HANDLE)
            HANDLE = timer(_loop=loop,_data=None)

        case "l" if not ON:
            text.set_text(f"{SELECTED} Log:\n\n{activities.get_log(SELECTED,recent=True)}")

        case "c" if not ON:
            activities.clean_log(SELECTED,today=True)
            save(activities)
            text.set_text(f"Today's {SELECTED} Log Cleared")

        case "C" if not ON:
            activities.clean_log(SELECTED)
            save(activities)
            text.set_text(f"{SELECTED}'s All Logs Cleared")

        case "D" if not ON:
            activities.delete(SELECTED)
            save(activities)
            text.set_text(f"{SELECTED} Deleted from Activities")

        case key if key in KEYS and not ON:
            key = KEYS[key]
            if key < len(activities):
                SELECTED = activities[key].name
                text.set_text(f"Selected: {SELECTED}")

def timer(_loop,_data):
    if ON:
        text.set_text(
            f"{SELECTED} is now active!\n\n {activities.active_log()}"
        )
        HANDLE = loop.set_alarm_in(1,timer)
        return HANDLE

# If arguments exist, process them, then exit
if len(sys.argv) > 1:args_handler(sys.argv[1:]); exit()

try: import urwid as u; TUI = True
except ModuleNotFoundError: TUI = False

# Check for these conditions before launching TUI
if TUI is False: print("Urwid Python module is missing:\nrun 'pip install urwid'")
elif SELECTED is None: print("No activities found.\nAdd at least one activity to start the UI.")

# Build and Run TUI
else:
    if ON:
        text = u.Text(f"{SELECTED} is now active!\n\n {activities.active_log()}","center")
    else:
        text = u.Text(f"Selected: {SELECTED}","center")
    fill = u.Filler(text)
    try: loop = u.MainLoop(fill,unhandled_input=input_handler); loop.run()
    except KeyboardInterrupt: print("Exiting...")
